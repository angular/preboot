# Cache key for CircleCI. We want to invalidate the cache whenever the npm shrinkwrap
# changed.
var_1: &cache_key preboot-v2-{{ checksum "yarn.lock" }}
# Use the CircleCI browsers image that comes with NodeJS installed
var_2: &docker_image cimg/node:14.17

# Executor Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors
executors:
  action-executor:
    docker:
      - image: *docker_image
    working_directory: ~/ng

# Workspace initially persisted by the `setup` job.
# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
# https://circleci.com/blog/deep-diving-into-circleci-workspaces/
var_3: &workspace_location .

# Job step for checking out the source code from GitHub. This also ensures that the source code
# is rebased on top of master.
var_4: &checkout_code
  checkout:
    # After checkout, rebase on top of master. By default, PRs are not rebased on top of master,
    # which we want. See https://discuss.circleci.com/t/1662
    post: git pull --ff-only origin "refs/pull/${CI_PULL_REQUEST//*pull\//}/merge"

# Restores the cache that could be available for the current Yarn lock file. The cache usually
# includes the node modules.
var_5: &restore_cache
  restore_cache:
    key: *cache_key

# Saves the cache for the current Yarn lock file. We store the node modules
# in order to make subsequent builds faster.
var_6: &save_cache
  save_cache:
    key: *cache_key
    paths:
      - ~/.cache/yarn

# Job step that ensures that the node module dependencies are installed and up-to-date. We use
# Yarn with the frozen lockfile option in order to make sure that lock file and package.json are
# in sync. Unlike in Travis, we don't need to manually purge the node modules if stale because
# CircleCI automatically discards the cache if the checksum of the lock file has changed.
var_7: &yarn_install
  run: yarn install --frozen-lockfile --non-interactive

# Attaches the release output which has been stored in the workspace to the current job.
# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
var_8: &attach_release_output
  attach_workspace:
    at: *workspace_location



# -----------------------------
# Container version of CircleCI
# -----------------------------
version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.0.1

# -----------------------------------------------------------------------------------------
# Job definitions. Jobs which are defined just here, will not run automatically. Each job
# must be part of a workflow definition in order to run for PRs and push builds.
# -----------------------------------------------------------------------------------------
jobs:

  build_and_test:
    executor: action-executor
    steps:
      - *checkout_code
      - *restore_cache
      - *yarn_install

      - run: yarn build

      - browser-tools/install-chrome
      - run: yarn test:once

      # Store the release output in the workspace storage. This means that other jobs
      # in the same workflow can attach the release output to their job.
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - ./dist

      - *save_cache

  e2e:
    executor: action-executor
    steps:
      - browser-tools/install-chrome
      - *checkout_code
      - *restore_cache
      - *attach_release_output

      - run:
          name: 'Setup custom environment variables'
          # Use matching versions of Chromium (via puppeteer) and ChromeDriver.
          # https://github.com/GoogleChrome/puppeteer/releases
          # http://chromedriver.chromium.org/downloads
          command: |
            echo 'export CHROMEDRIVER_VERSION_ARG="--versions.chrome 93.0.4577.0"' >> $BASH_ENV # Redirect into $BASH_ENV
      - run: yarn e2e

      - *save_cache

# ----------------------------------------------------------------------------------------
# Workflow definitions. A workflow usually groups multiple jobs together. This is useful if
# one job depends on another.
# ----------------------------------------------------------------------------------------
workflows:
  version: 2

  build_and_test:
    jobs:
      - build_and_test
      - e2e:
          requires:
            - build_and_test
